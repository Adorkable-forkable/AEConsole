//
// AEConsole.swift
//
// Copyright (c) 2016 Marko Tadić <tadija@me.com> http://tadija.net
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//

import AELog
import UIKit

// MARK: - AEConsole

/// Facade for displaying log generated by `aelog` in Console UI overlay on top of your app.
open class AEConsole: AELogDelegate {
    
    // MARK: Properties
    
    fileprivate static let sharedInstance = AEConsole()
    fileprivate let brain = AEConsoleBrain()
    fileprivate let settings = AEConsoleSettings.sharedInstance
    fileprivate var appDelegate: UIApplicationDelegate?
    
    // MARK: API
    
    /**
        Enable Console UI by calling this method in your AppDelegate's `didFinishLaunchingWithOptions:`
     
        - NOTE: If `AEConsole` setting "Enabled" is set to "NO" then it does nothing.
    */
    open class func launchWithAppDelegate(_ delegate: UIApplicationDelegate) {
        if AEConsoleSettings.sharedInstance.consoleEnabled {
            AELog.launch(with: sharedInstance)
            sharedInstance.appDelegate = delegate
            sharedInstance.brain.configureConsoleUIWithAppDelegate(delegate)
        }
    }
    
    /// Current state of Console UI visibility
    open class var hidden: Bool {
        return !sharedInstance.brain.consoleView.onScreen
    }
    
    /// Toggle Console UI
    open class func toggle() {
        if !sharedInstance.brain.consoleView.onScreen {
            sharedInstance.activateConsoleUI()
        }
        sharedInstance.brain.consoleView.toggleUI()
    }
    
    // MARK: Init
    
    fileprivate init() {
        let center = NotificationCenter.default
        let notification = NSNotification.Name.UIApplicationDidBecomeActive
        center.addObserver(self, selector: #selector(activateConsoleUI), name: notification, object: nil)
    }
    
    deinit {
        NotificationCenter.default.removeObserver(self)
    }
    
    @objc fileprivate func activateConsoleUI() {
        guard let
            delegate = appDelegate,
            let _window = delegate.window, let window = _window
        else { return }

        window.bringSubview(toFront: brain.consoleView)
        if settings.shakeGestureEnabled {
            brain.consoleView.becomeFirstResponder()
        }
    }
    
    // MARK: AELogDelegate
    
    /**
        Forwards latest log line from `aelog` to Console UI.

        - parameter logLine: Log line which will be added to Console UI.
    */
    open func didLog(_ logLine: Line) {
        brain.addLogLine(logLine)
        activateConsoleUI()
    }
    
}

// MARK: - AEConsoleSettings

/**
    Helper for accessing settings from the external file (same file used by `AELog`).

    Create `AELog.plist` dictionary file and add it to your target.
    Add `Console` dictionary inside it and there you can manage all console settings.

    There is `Key` struct which contains possible keys for all settings.
*/
open class AEConsoleSettings: Settings {
    
    // MARK: Constants
    
    /// Setting keys which can be used in `Console` dictionary inside `AELog.plist`.
    public struct Key {
        public static let ConsoleSettings = "Console"
        
        public struct Console {
            /// Boolean - Console UI enabled flag (defaults to `YES`)
            public static let Enabled = "Enabled"
            
            /// Boolean - Console UI visible on app start flag (defaults to `NO`)
            public static let AutoStart = "AutoStart"
            
            /// Boolean - Shake gesture enabled flag (defaults to `YES`)
            public static let ShakeGesture = "ShakeGesture"
            
            /// String - Hex string for Console background color (defaults to 000000)
            public static let BackColor = "BackColor"
            
            /// String - Hex string for Console text color (defaults to FFFFFF)
            public static let TextColor = "TextColor"
            
            /// Number - Console UI font size (defaults to 12)
            public static let FontSize = "FontSize"
            
            /// Number - Console UI row height (defaults to 14)
            public static let RowHeight = "RowHeight"
            
            /// Number - Console UI opacity (defaults to 0.7)
            public static let Opacity = "Opacity"
        }
    }
    
    fileprivate struct Default {
        fileprivate static let Enabled = true
        fileprivate static let AutoStart = false
        fileprivate static let ShakeGesture = true
        fileprivate static let BackColor = UIColor.black
        fileprivate static let TextColor = UIColor.white
        fileprivate static let FontSize: CGFloat = 12.0
        fileprivate static let RowHeight: CGFloat = 14.0
        fileprivate static let Opacity: CGFloat = 0.7
    }
    
    // MARK: Properties
    
    fileprivate static let sharedInstance = AEConsoleSettings()
    
    fileprivate lazy var textColorWithOpacity: UIColor = { [unowned self] in
        self.consoleTextColor.withAlphaComponent(Default.Opacity)
    }()
    
    fileprivate lazy var consoleSettings: [String : AnyObject]? = { [unowned self] in
        guard let
            settings = self.plist,
            let console = settings[Key.ConsoleSettings] as? [String : AnyObject]
        else { return nil }
        return console
    }()
    
    // MARK: Settings
    
    fileprivate lazy var consoleFont: UIFont = {
        return UIFont.monospacedDigitSystemFont(ofSize: self.consoleFontSize, weight: UIFontWeightRegular)
    }()
    
    fileprivate lazy var consoleEnabled: Bool = { [unowned self] in
        guard let enabled = self.boolForKey(Key.Console.Enabled)
        else { return Default.Enabled }
        return enabled
    }()
    
    fileprivate lazy var consoleAutoStart: Bool = { [unowned self] in
        guard let autoStart = self.boolForKey(Key.Console.AutoStart)
        else { return Default.AutoStart }
        return autoStart
    }()
    
    fileprivate lazy var shakeGestureEnabled: Bool = { [unowned self] in
        guard let shake = self.boolForKey(Key.Console.ShakeGesture)
        else { return Default.ShakeGesture }
        return shake
    }()
    
    fileprivate lazy var consoleBackColor: UIColor = { [unowned self] in
        guard let color = self.colorForKey(Key.Console.BackColor)
        else { return Default.BackColor }
        return color
    }()
    
    fileprivate lazy var consoleTextColor: UIColor = { [unowned self] in
        guard let color = self.colorForKey(Key.Console.TextColor)
        else { return Default.TextColor }
        return color
    }()
    
    fileprivate lazy var consoleFontSize: CGFloat = { [unowned self] in
        guard let fontSize = self.numberForKey(Key.Console.FontSize)
        else { return Default.FontSize }
        return fontSize
    }()
    
    fileprivate lazy var consoleRowHeight: CGFloat = { [unowned self] in
        guard let rowHeight = self.numberForKey(Key.Console.RowHeight)
        else { return Default.RowHeight }
        return rowHeight
    }()
    
    fileprivate lazy var consoleOpacity: CGFloat = { [unowned self] in
        guard let opacity = self.numberForKey(Key.Console.Opacity)
        else { return Default.Opacity }
        return opacity
    }()
    
    // MARK: Helpers
    
    fileprivate func boolForKey(_ key: String) -> Bool? {
        guard let
            settings = consoleSettings,
            let bool = settings[key] as? Bool
        else { return nil }
        return bool
    }
    
    fileprivate func numberForKey(_ key: String) -> CGFloat? {
        guard let
            settings = consoleSettings,
            let number = settings[key] as? CGFloat
        else { return nil }
        return number
    }
    
    fileprivate func colorForKey(_ key: String) -> UIColor? {
        guard let
            settings = consoleSettings,
            let hex = settings[key] as? String
        else { return nil }
        let color = colorFromHexString(hex)
        return color
    }
    
    fileprivate func colorFromHexString(_ hex: String) -> UIColor? {
        let scanner = Scanner(string: hex)
        var hexValue: UInt32 = 0
        if scanner.scanHexInt32(&hexValue) {
            let red   = CGFloat((hexValue & 0xFF0000) >> 16) / 255.0
            let green = CGFloat((hexValue & 0x00FF00) >> 8) / 255.0
            let blue  = CGFloat((hexValue & 0x0000FF)) / 255.0
            let color = UIColor(red: red, green: green, blue: blue, alpha: 1.0)
            return color
        } else { return nil }
    }
    
}

// MARK: - AEConsoleBrain

class AEConsoleBrain: NSObject, UITableViewDataSource, UITableViewDelegate, UITextFieldDelegate {
    
    // MARK: Outlets
    
    fileprivate var consoleView: AEConsoleView!
    
    // MARK: Properties
    
    fileprivate let settings = AEConsoleSettings.sharedInstance
    
    fileprivate var lines = [Line]()
    fileprivate var filteredLines = [Line]()
    
    fileprivate var contentWidth: CGFloat = 0.0
    
    fileprivate var filterText: String? {
        didSet {
            filterActive = !isEmpty(filterText)
        }
    }
    
    fileprivate var filterActive = false {
        didSet {
            updateFilter()
            updateInterfaceIfNeeded()
        }
    }
    
    // MARK: API
    
    func configureConsoleUIWithAppDelegate(_ delegate: UIApplicationDelegate) {
        guard let _window = delegate.window, let window = _window else { return }
        
        let console = AEConsoleView()
        console.frame = window.bounds
        console.autoresizingMask = [.flexibleWidth, .flexibleHeight]
        console.onScreen = settings.consoleAutoStart
        window.addSubview(console)
        
        consoleView = console
        consoleView.tableView.dataSource = self
        consoleView.tableView.delegate = self
        consoleView.textField.delegate = self
    }
    
    func addLogLine(_ logLine: Line) {
        let calculatedLineWidth = widthForLine(logLine)
        if calculatedLineWidth > contentWidth {
            contentWidth = calculatedLineWidth
        }
        
        if filterActive {
            guard let filter = filterText else { return }
            if logLine.description.contains(filter) {
                filteredLines.append(logLine)
            }
        }
        
        lines.append(logLine)
        
        updateInterfaceIfNeeded()
    }
    
    // MARK: Helpers
    
    fileprivate func updateFilter() {
        if filterActive {
            guard let filter = filterText else { return }
            aelog("Filter Lines [\(filterActive)] - <\(filter)>")
            let filtered = lines.filter({ $0.description.localizedCaseInsensitiveContains(filter) })
            filteredLines = filtered
        } else {
            aelog("Filter Lines [\(filterActive)]")
            filteredLines.removeAll()
        }
    }
    
    fileprivate func updateInterfaceIfNeeded() {
        if consoleView.onScreen {
            consoleView.updateUI()
        }
    }
    
    fileprivate func widthForLine(_ line: Line) -> CGFloat {
        let text = line.description
        let maxSize = CGSize(width: CGFloat.greatestFiniteMagnitude, height: settings.consoleRowHeight)
        let options = NSStringDrawingOptions.usesLineFragmentOrigin
        let attributes = [NSFontAttributeName : settings.consoleFont]
        let nsText = text as NSString
        let size = nsText.boundingRect(with: maxSize, options: options, attributes: attributes, context: nil)
        let width = size.width
        return width
    }
    
    fileprivate func isEmpty(_ text: String?) -> Bool {
        guard let text = text else { return true }
        let characterSet = CharacterSet.whitespacesAndNewlines
        let isTextEmpty = text.trimmingCharacters(in: characterSet).isEmpty
        return isTextEmpty
    }
    
    // MARK: Actions
    
    fileprivate func clearLog() {
        lines.removeAll()
        filteredLines.removeAll()
        updateInterfaceIfNeeded()
    }
    
    fileprivate func exportAllLogLines() {
        let stringLines = lines.map({ $0.description })
        let log = stringLines.joined(separator: "\n")
        
        if isEmpty(log) {
            aelog("Log is empty, nothing to export here.")
        } else {
            let filename = "\(Date().timeIntervalSince1970).aelog"
            let documentsPath = NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)[0]
            let documentsURL = URL(fileURLWithPath: documentsPath)
            let fileURL = documentsURL.appendingPathComponent(filename)
            
            do {
                try log.write(to: fileURL, atomically: true, encoding: String.Encoding.utf8)
                aelog("Log is exported to path: \(fileURL)")
            } catch {
                aelog(error)
            }
        }
    }
    
    // MARK: UITableViewDataSource
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        let rows = filterActive ? filteredLines : lines
        return rows.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: AEConsoleCell.identifier) as! AEConsoleCell
        return cell
    }
    
    // MARK: UITableViewDelegate
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        let rows = filterActive ? filteredLines : lines
        let logLine = rows[indexPath.row]
        cell.textLabel?.text = logLine.description
    }
    
    // MARK: UIScrollViewDelegate
    
    func scrollViewDidEndDragging(_ scrollView: UIScrollView, willDecelerate decelerate: Bool) {
        if !decelerate {
            consoleView.currentOffsetX = scrollView.contentOffset.x
        }
    }
    
    func scrollViewDidEndDecelerating(_ scrollView: UIScrollView) {
        consoleView.currentOffsetX = scrollView.contentOffset.x
    }
    
    // MARK: UITextFieldDelegate
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
        if !isEmpty(textField.text) {
            filterText = textField.text
        }
        return true
    }
    
}

// MARK: - AEConsoleView

class AEConsoleView: UIView {
    
    // MARK: Constants
    
    fileprivate struct Layout {
        static let FilterHeight: CGFloat = 60
        static let FilterExpandedTop: CGFloat = 0
        static let FilterCollapsedTop: CGFloat = -Layout.FilterHeight
        
        static let MenuWidth: CGFloat = 300
        static let MenuHeight: CGFloat = 50
        static let MenuExpandedLeading: CGFloat = -Layout.MenuWidth
        static let MenuCollapsedLeading: CGFloat = -75
        
        static let MagicNumber: CGFloat = 10
    }
    
    // MARK: Outlets
    
    fileprivate let tableView = UITableView()
    
    fileprivate let filterView = UIView()
    fileprivate let filterStack = UIStackView()
    fileprivate var filterViewTop: NSLayoutConstraint!
    
    fileprivate let exportLogButton = UIButton()
    fileprivate let linesCountStack = UIStackView()
    fileprivate let linesTotalLabel = UILabel()
    fileprivate let linesFilteredLabel = UILabel()
    fileprivate let textField = UITextField()
    fileprivate let clearFilterButton = UIButton()
    
    fileprivate let menuView = UIView()
    fileprivate let menuStack = UIStackView()
    fileprivate var menuViewLeading: NSLayoutConstraint!
    
    fileprivate let toggleToolbarButton = UIButton()
    fileprivate let forwardTouchesButton = UIButton()
    fileprivate let autoFollowButton = UIButton()
    fileprivate let clearLogButton = UIButton()
    
    fileprivate let updateOpacityGesture = UIPanGestureRecognizer()
    fileprivate let hideConsoleGesture = UITapGestureRecognizer()
    
    // MARK: Properties
    
    fileprivate let brain = AEConsole.sharedInstance.brain
    fileprivate let settings = AEConsoleSettings.sharedInstance
    
    fileprivate var onScreen = false {
        didSet {
            isHidden = !onScreen
            
            if onScreen {
                updateUI()
            }
        }
    }
    
    fileprivate var toolbarActive = false {
        didSet {
            currentTopInset = toolbarActive ? topInsetLarge : topInsetSmall
        }
    }
    
    fileprivate var currentOffsetX = -Layout.MagicNumber
    fileprivate var currentTopInset = Layout.MagicNumber
    fileprivate var topInsetSmall = Layout.MagicNumber
    fileprivate var topInsetLarge = Layout.MagicNumber + Layout.FilterHeight
    
    fileprivate var opacity: CGFloat = 1.0 {
        didSet {
            configureColorsWithOpacity(opacity)
        }
    }
    
    // MARK: API
    
    func toggleUI() {
        textField.resignFirstResponder()
        
        UIView.transition(with: self, duration: 0.3, options: .transitionCrossDissolve, animations: { () -> Void in
            self.onScreen = !self.onScreen
        }, completion:nil)
    }
    
    // MARK: Helpers
    
    fileprivate func updateUI() {
        tableView.reloadData()
        
        updateLinesCountLabels()
        updateContentLayout()
        
        if autoFollowButton.isSelected {
            scrollToBottom()
        }
    }
    
    fileprivate func updateLinesCountLabels() {
        linesTotalLabel.text = "□ \(brain.lines.count)"
        let filteredCount = brain.filterActive ? brain.filteredLines.count : 0
        linesFilteredLabel.text = "■ \(filteredCount)"
    }
    
    fileprivate func updateContentLayout() {
        let maxWidth = max(brain.contentWidth, bounds.width)
        
        let newFrame = CGRect(x: 0.0, y: 0.0, width: maxWidth, height: bounds.height)
        tableView.frame = newFrame
        
        UIView.animate(withDuration: 0.3, animations: { [unowned self] () -> Void in
            let inset = Layout.MagicNumber
            let newInset = UIEdgeInsets(top: self.currentTopInset, left: inset, bottom: inset, right: maxWidth)
            self.tableView.contentInset = newInset
        }) 
        
        updateContentOffset()
    }
    
    fileprivate func updateContentOffset() {
        if toolbarActive {
            if tableView.contentOffset.y == -topInsetSmall {
                let offset = CGPoint(x: tableView.contentOffset.x, y: -topInsetLarge)
                tableView.setContentOffset(offset, animated: true)
            }
        } else {
            if tableView.contentOffset.y == -topInsetLarge {
                let offset = CGPoint(x: tableView.contentOffset.x, y: -topInsetSmall)
                tableView.setContentOffset(offset, animated: true)
            }
        }
        tableView.flashScrollIndicators()
    }
    
    fileprivate func scrollToBottom() {
        let diff = tableView.contentSize.height - tableView.bounds.size.height
        if diff > 0 {
            let offsetY = diff + Layout.MagicNumber
            let bottomOffset = CGPoint(x: currentOffsetX, y: offsetY)
            tableView.setContentOffset(bottomOffset, animated: false)
        }
    }
    
    fileprivate func configureColorsWithOpacity(_ opacity: CGFloat) {
        tableView.backgroundColor = settings.consoleBackColor.withAlphaComponent(opacity)
        
        let textOpacity = max(0.3, opacity * 1.1)
        settings.textColorWithOpacity = settings.consoleTextColor.withAlphaComponent(textOpacity)
        
        let toolbarOpacity = min(0.7, opacity * 1.5)
        filterView.backgroundColor = settings.consoleBackColor.withAlphaComponent(toolbarOpacity)
        menuView.backgroundColor = settings.consoleBackColor.withAlphaComponent(toolbarOpacity)
        
        let borderOpacity = toolbarOpacity / 2
        filterView.layer.borderColor = settings.consoleBackColor.withAlphaComponent(borderOpacity).cgColor
        filterView.layer.borderWidth = 1.0
        menuView.layer.borderColor = settings.consoleBackColor.withAlphaComponent(borderOpacity).cgColor
        menuView.layer.borderWidth = 1.0
        
        // refresh text color
        tableView.reloadData()
    }
    
    // MARK: Init
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        commonInit()
    }
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        commonInit()
    }
    
    fileprivate func commonInit() {
        configureUI()
        opacity = settings.consoleOpacity
    }
    
    // MARK: Actions
    
    func didTapToggleToolbarButton(_ sender: UIButton) {
        toggleToolbar()
    }
    
    func didTapForwardTouchesButton(_ sender: UIButton) {
        forwardTouchesButton.isSelected = !forwardTouchesButton.isSelected
        aelog("Forward Touches [\(forwardTouchesButton.isSelected)]")
    }
    
    func didTapAutoFollowButton(_ sender: UIButton) {
        autoFollowButton.isSelected = !autoFollowButton.isSelected
        aelog("Auto Follow [\(autoFollowButton.isSelected)]")
    }
    
    func didTapClearLogButton(_ sender: UIButton) {
        brain.clearLog()
    }
    
    func didTapExportButton(_ sender: UIButton) {
        brain.exportAllLogLines()
    }
    
    func didTapFilterClearButton(_ sender: UIButton) {
        textField.resignFirstResponder()
        if !brain.isEmpty(textField.text) {
            brain.filterText = nil
        }
        textField.text = nil
    }
    
    func didRecognizeUpdateOpacityGesture(_ sender: UIPanGestureRecognizer) {
        if sender.state == .ended {
            if toolbarActive {
                let xTranslation = sender.translation(in: menuView).x
                if abs(xTranslation) > (3 * Layout.MagicNumber) {
                    let location = sender.location(in: menuView)
                    let opacity = opacityForLocation(location)
                    self.opacity = opacity
                }
            }
        }
    }
    
    func didRecognizeHideConsoleGesture(_ sender: UITapGestureRecognizer) {
        toggleUI()
    }
    
    // MARK: Helpers
    
    fileprivate func opacityForLocation(_ location: CGPoint) -> CGFloat {
        let calculatedOpacity = ((location.x * 1.0) / 300)
        let minOpacity = max(0.1, calculatedOpacity)
        let maxOpacity = min(0.9, minOpacity)
        return maxOpacity
    }
    
    fileprivate func toggleToolbar() {
        filterViewTop.constant = toolbarActive ? Layout.FilterCollapsedTop : Layout.FilterExpandedTop
        menuViewLeading.constant = toolbarActive ? Layout.MenuCollapsedLeading : Layout.MenuExpandedLeading
        let alpha: CGFloat = toolbarActive ? 0.3 : 1.0
        
        UIView.animate(withDuration: 0.3, animations: {
            self.filterView.alpha = alpha
            self.menuView.alpha = alpha
            self.filterView.layoutIfNeeded()
            self.menuView.layoutIfNeeded()
        }) 
        
        if toolbarActive {
            textField.resignFirstResponder()
        }
        
        toolbarActive = !toolbarActive
    }
    
    // MARK: UI
    
    fileprivate func configureUI() {
        configureOutlets()
        configureLayout()
    }
    
    fileprivate func configureOutlets() {
        configureTableView()
        configureFilterView()
        configureMenuView()
        configureGestures()
    }
    
    fileprivate func configureTableView() {
        tableView.rowHeight = settings.consoleRowHeight
        tableView.allowsSelection = false
        tableView.separatorStyle = .none
        
        tableView.register(AEConsoleCell.self, forCellReuseIdentifier: AEConsoleCell.identifier)
    }
    
    fileprivate func configureFilterView() {
        configureFilterStack()
        configureFilterLinesCount()
        configureFilterTextField()
        configureFilterButtons()
    }
    
    fileprivate func configureFilterStack() {
        filterView.alpha = 0.3
        filterStack.axis = .horizontal
        filterStack.alignment = .fill
        filterStack.distribution = .fill
        
        let stackInsets = UIEdgeInsets(top: Layout.MagicNumber, left: 0, bottom: 0, right: 0)
        filterStack.layoutMargins = stackInsets
        filterStack.isLayoutMarginsRelativeArrangement = true
    }
    
    fileprivate func configureFilterLinesCount() {
        linesCountStack.axis = .vertical
        linesCountStack.alignment = .fill
        linesCountStack.distribution = .fillEqually
        let stackInsets = UIEdgeInsets(top: Layout.MagicNumber, left: 0, bottom: Layout.MagicNumber, right: 0)
        linesCountStack.layoutMargins = stackInsets
        linesCountStack.isLayoutMarginsRelativeArrangement = true
        
        linesTotalLabel.font = settings.consoleFont
        linesTotalLabel.textColor = settings.consoleTextColor
        linesTotalLabel.textAlignment = .left
        
        linesFilteredLabel.font = settings.consoleFont
        linesFilteredLabel.textColor = settings.consoleTextColor
        linesFilteredLabel.textAlignment = .left
    }
    
    fileprivate func configureFilterTextField() {
        let textColor = settings.consoleTextColor
        textField.autocapitalizationType = .none
        textField.tintColor = textColor
        textField.font = settings.consoleFont.withSize(14)
        textField.textColor = textColor
        let attributes = [NSForegroundColorAttributeName : textColor.withAlphaComponent(0.5)]
        let placeholderText = NSAttributedString(string: "Type here...", attributes: attributes)
        textField.attributedPlaceholder = placeholderText
        textField.layer.sublayerTransform = CATransform3DMakeTranslation(Layout.MagicNumber, 0, 0)
    }
    
    fileprivate func configureFilterButtons() {
        exportLogButton.setTitle("🌙", for: UIControlState())
        exportLogButton.addTarget(self, action: #selector(didTapExportButton(_:)), for: .touchUpInside)
        
        clearFilterButton.setTitle("🔥", for: UIControlState())
        clearFilterButton.addTarget(self, action: #selector(didTapFilterClearButton(_:)), for: .touchUpInside)
    }
    
    fileprivate func configureMenuView() {
        configureMenuStack()
        configureMenuButtons()
    }
    
    fileprivate func configureMenuStack() {
        menuView.alpha = 0.3
        menuView.layer.cornerRadius = Layout.MagicNumber
        
        menuStack.axis = .horizontal
        menuStack.alignment = .fill
        menuStack.distribution = .fillEqually
    }
    
    fileprivate func configureMenuButtons() {
        toggleToolbarButton.setTitle("☀️", for: UIControlState())
        forwardTouchesButton.setTitle("⚡️", for: UIControlState())
        forwardTouchesButton.setTitle("✨", for: .selected)
        autoFollowButton.setTitle("🌟", for: UIControlState())
        autoFollowButton.setTitle("💫", for: .selected)
        clearLogButton.setTitle("🔥", for: UIControlState())
        
        autoFollowButton.isSelected = true
        
        toggleToolbarButton.addTarget(self, action: #selector(didTapToggleToolbarButton(_:)), for: .touchUpInside)
        forwardTouchesButton.addTarget(self, action: #selector(didTapForwardTouchesButton(_:)), for: .touchUpInside)
        autoFollowButton.addTarget(self, action: #selector(didTapAutoFollowButton(_:)), for: .touchUpInside)
        clearLogButton.addTarget(self, action: #selector(didTapClearLogButton(_:)), for: .touchUpInside)
    }
    
    fileprivate func configureGestures() {
        configureUpdateOpacityGesture()
        configureHideConsoleGesture()
    }
    
    fileprivate func configureUpdateOpacityGesture() {
        updateOpacityGesture.addTarget(self, action: #selector(didRecognizeUpdateOpacityGesture(_:)))
        menuView.addGestureRecognizer(updateOpacityGesture)
    }
    
    fileprivate func configureHideConsoleGesture() {
        hideConsoleGesture.numberOfTouchesRequired = 2
        hideConsoleGesture.numberOfTapsRequired = 2
        hideConsoleGesture.addTarget(self, action: #selector(didRecognizeHideConsoleGesture(_:)))
        addGestureRecognizer(hideConsoleGesture)
    }
    
    // MARK: Layout
    
    fileprivate func configureLayout() {
        configureHierarchy()
        configureViewsForLayout()
        configureConstraints()
    }
    
    fileprivate func configureHierarchy() {
        addSubview(tableView)
        
        filterStack.addArrangedSubview(exportLogButton)
        
        linesCountStack.addArrangedSubview(linesTotalLabel)
        linesCountStack.addArrangedSubview(linesFilteredLabel)
        filterStack.addArrangedSubview(linesCountStack)
        
        filterStack.addArrangedSubview(textField)
        filterStack.addArrangedSubview(clearFilterButton)
        
        filterView.addSubview(filterStack)
        addSubview(filterView)
        
        menuStack.addArrangedSubview(toggleToolbarButton)
        menuStack.addArrangedSubview(forwardTouchesButton)
        menuStack.addArrangedSubview(autoFollowButton)
        menuStack.addArrangedSubview(clearLogButton)
        menuView.addSubview(menuStack)
        addSubview(menuView)
    }
    
    fileprivate func configureViewsForLayout() {
        filterView.translatesAutoresizingMaskIntoConstraints = false
        filterStack.translatesAutoresizingMaskIntoConstraints = false
        
        menuView.translatesAutoresizingMaskIntoConstraints = false
        menuStack.translatesAutoresizingMaskIntoConstraints = false
    }
    
    fileprivate func configureConstraints() {
        configureFilterViewConstraints()
        configureFilterStackConstraints()
        configureFilterStackSubviewConstraints()
        
        configureMenuViewConstraints()
        configureMenuStackConstraints()
    }
    
    fileprivate func configureFilterViewConstraints() {
        let leading = filterView.leadingAnchor.constraint(equalTo: leadingAnchor)
        let trailing = filterView.trailingAnchor.constraint(equalTo: trailingAnchor)
        let height = filterView.heightAnchor.constraint(equalToConstant: Layout.FilterHeight)
        filterViewTop = filterView.topAnchor.constraint(equalTo: topAnchor, constant: Layout.FilterCollapsedTop)
        NSLayoutConstraint.activate([leading, trailing, height, filterViewTop])
    }
    
    fileprivate func configureFilterStackConstraints() {
        let leading = filterStack.leadingAnchor.constraint(equalTo: filterView.leadingAnchor)
        let trailing = filterStack.trailingAnchor.constraint(equalTo: filterView.trailingAnchor)
        let top = filterStack.topAnchor.constraint(equalTo: filterView.topAnchor)
        let bottom = filterStack.bottomAnchor.constraint(equalTo: filterView.bottomAnchor)
        NSLayoutConstraint.activate([leading, trailing, top, bottom])
    }
    
    fileprivate func configureFilterStackSubviewConstraints() {
        let exportButtonWidth = exportLogButton.widthAnchor.constraint(equalToConstant: 75)
        let linesCountWidth = linesCountStack.widthAnchor.constraint(greaterThanOrEqualToConstant: 50)
        let clearFilterButtonWidth = clearFilterButton.widthAnchor.constraint(equalToConstant: 75)
        NSLayoutConstraint.activate([exportButtonWidth, linesCountWidth, clearFilterButtonWidth])
    }
    
    fileprivate func configureMenuViewConstraints() {
        let width = menuView.widthAnchor.constraint(equalToConstant: Layout.MenuWidth + Layout.MagicNumber)
        let height = menuView.heightAnchor.constraint(equalToConstant: Layout.MenuHeight)
        let centerY = menuView.centerYAnchor.constraint(equalTo: centerYAnchor)
        menuViewLeading = menuView.leadingAnchor.constraint(equalTo: trailingAnchor, constant: Layout.MenuCollapsedLeading)
        NSLayoutConstraint.activate([width, height, centerY, menuViewLeading])
    }
    
    fileprivate func configureMenuStackConstraints() {
        let leading = menuStack.leadingAnchor.constraint(equalTo: menuView.leadingAnchor)
        let trailing = menuStack.trailingAnchor.constraint(equalTo: menuView.trailingAnchor, constant: -Layout.MagicNumber)
        let top = menuStack.topAnchor.constraint(equalTo: menuView.topAnchor)
        let bottom = menuStack.bottomAnchor.constraint(equalTo: menuView.bottomAnchor)
        NSLayoutConstraint.activate([leading, trailing, top, bottom])
    }
    
    // MARK: Override
    
    override func layoutSubviews() {
        super.layoutSubviews()
        
        updateContentLayout()
    }
    
    override func hitTest(_ point: CGPoint, with event: UIEvent?) -> UIView? {
        let hitView = super.hitTest(point, with: event)
        
        let filter = hitView?.superview == filterStack
        let menu = hitView?.superview == menuStack
        if !filter && !menu && forwardTouchesButton.isSelected {
            return nil
        }
        
        return hitView
    }
    
    override var canBecomeFirstResponder : Bool {
        return true
    }
    
    override func motionEnded(_ motion: UIEventSubtype, with event: UIEvent?) {
        if motion == .motionShake {
            if settings.shakeGestureEnabled {
                toggleUI()
            }
        }
    }
    
}

// MARK: - AEConsoleCell

class AEConsoleCell: UITableViewCell {
    
    // MARK: Constants
    
    static let identifier = "AEConsoleCell"
    
    // MARK: Properties
    
    fileprivate let settings = AEConsoleSettings.sharedInstance
    
    // MARK: Init
    
    override init(style: UITableViewCellStyle, reuseIdentifier: String?) {
        super.init(style: style, reuseIdentifier: reuseIdentifier)
        commonInit()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        commonInit()
    }
    
    fileprivate func commonInit() {
        backgroundColor = UIColor.clear
        guard let label = textLabel else { return }
        label.font = settings.consoleFont
        label.textColor = settings.textColorWithOpacity
        label.numberOfLines = 1
        label.textAlignment = .left
    }
    
    // MARK: Override
    
    override func prepareForReuse() {
        super.prepareForReuse()
        textLabel?.textColor = settings.textColorWithOpacity
    }
    
    override func layoutSubviews() {
        super.layoutSubviews()
        textLabel?.frame = bounds
    }
    
}
