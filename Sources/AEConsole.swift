//
// AEConsole.swift
//
// Copyright (c) 2016 Marko TadiÄ‡ <tadija@me.com> http://tadija.net
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//

import AELog
import UIKit

// MARK: - AEConsole

/// Facade for displaying log generated by `aelog` in Console UI overlay on top of your app.
open class AEConsole: AELogDelegate {
    
    // MARK: Properties
    
    static let sharedInstance = AEConsole()
    let brain = AEConsoleBrain()
    fileprivate let config = Config.shared
    fileprivate var appDelegate: UIApplicationDelegate?
    
    // MARK: API
    
    /**
        Enable Console UI by calling this method in your AppDelegate's `didFinishLaunchingWithOptions:`
     
        - NOTE: If `AEConsole` setting "Enabled" is set to "NO" then it does nothing.
    */
    open class func launchWithAppDelegate(_ delegate: UIApplicationDelegate) {
        if Config.shared.isEnabled {
            AELog.launch(with: sharedInstance)
            sharedInstance.appDelegate = delegate
            sharedInstance.brain.configureConsoleUIWithAppDelegate(delegate)
        }
    }
    
    /// Current state of Console UI visibility
    open class var hidden: Bool {
        return !sharedInstance.brain.consoleView.onScreen
    }
    
    /// Toggle Console UI
    open class func toggle() {
        guard let consoleView = sharedInstance.brain.consoleView else { return }
        
        if !consoleView.onScreen {
            sharedInstance.activateConsoleUI()
        }
        consoleView.toggleUI()
    }
    
    // MARK: Init
    
    fileprivate init() {
        let center = NotificationCenter.default
        let notification = NSNotification.Name.UIApplicationDidBecomeActive
        center.addObserver(self, selector: #selector(activateConsoleUI), name: notification, object: nil)
    }
    
    deinit {
        NotificationCenter.default.removeObserver(self)
    }
    
    @objc fileprivate func activateConsoleUI() {
        guard let
            delegate = appDelegate,
            let _window = delegate.window, let window = _window
        else { return }

        window.bringSubview(toFront: brain.consoleView)
        if config.isShakeGestureEnabled {
            brain.consoleView.becomeFirstResponder()
        }
    }
    
    // MARK: AELogDelegate
    
    /**
        Forwards latest log line from `aelog` to Console UI.

        - parameter logLine: Log line which will be added to Console UI.
    */
    open func didLog(_ logLine: Line) {
        brain.addLogLine(logLine)
        activateConsoleUI()
    }
    
}
